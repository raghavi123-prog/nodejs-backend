name: Build, Deploy Node.js App & Static HTML

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Step 3: Install dependencies for Node.js
      - name: Install dependencies
        run: npm install

      # Step 4: Run tests for Node.js
      - name: Run tests
        run: npm test || echo "No tests defined."

      # Step 5: Build Docker image for Node.js
      - name: Build Docker image
        run: docker build -t raghavi123/nodejs-backend-app .

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Push Docker image to Docker Hub
      - name: Push Docker image
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker push raghavi123/nodejs-backend-app
          echo "Docker image pushed successfully!"

     

# Step 8: Set up Minikube
      - name: Set up Minikube
        run: |
         echo "Setting up Minikube..."
         minikube start
         echo "Minikube started successfully!"


     

      # Step 9: Create Kubernetes deployment
      - name: Create Kubernetes deployment
        run: |
          echo "Creating Kubernetes deployment..."
          kubectl apply -f deployment.yaml

      # Step 10: Verify Kubernetes deployment
      - name: Verify Kubernetes deployment
        run: |
          echo "Verifying Kubernetes deployment..."
          kubectl get deployments

      # Step 11: Set up AWS CLI for Static HTML deployment
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Make sure your S3 bucket region matches this

      # Step 12: Sync static HTML file to S3
      - name: Sync static files to S3
        run: |
          echo "Uploading index.html to S3..."
          aws s3 cp ./index.html s3://kops-rag-storage-2/index.html
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 13: Create CloudWatch alarm for backend downtime
      - name: Create CloudWatch alarm
        run: |
          echo "Creating CloudWatch alarm..."
          aws cloudwatch put-metric-alarm --alarm-name BackendDowntimeAlarm --comparison-operator LessThanThreshold --evaluation-periods 1 --metric-name CPUUtilization --namespace AWS/EC2 --period 300 --statistic Average --threshold 0 --actions-enabled --alarm-actions arn:aws:sns:us-east-1:123456789012:BackendDowntimeTopic
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 14: Create SNS topic for backend downtime notifications
      - name: Create SNS topic
        run: |
          echo "Creating SNS topic..."
          aws sns create-topic --name BackendDowntimeTopic
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
